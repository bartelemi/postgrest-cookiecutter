# 3-tiered infrastructure with PostgreSQL, PostgREST, hosted by Nginx.
#
# Nginx handles TLS, static content and acts as a reverse-proxy for API requests.
# The application server (PostgREST) is connected to a PostgreSQL database.

version: "3.7"

services:
  web:
    image: nginx:{{ cookiecutter.nginx_version }}
    environment:
      NGINX_HOST: {{ cookiecutter.domain_name }}
      NGINX_HTTP_PORT: 80
{%- if cookiecutter.nginx_use_ssl == 'y' %}
      NGINX_HTTPS_PORT: 443
{%- endif %}
    ports:
    - "8080:80"
{%- if cookiecutter.nginx_use_ssl == 'y' %}
    - "4443:443"
{%- endif %}
    volumes:
    - ./acme-challenge:/srv/acme-challenge:ro
    - ./certificates:/etc/ssl/certs:ro
    - ./logs/web:/var/log/nginx:rw
    - ./nginx/templates:/etc/nginx/templates:ro
{%- if cookiecutter.use_swagger_ui == 'y' %}
    - ./www/swagger:/usr/share/nginx/html/swagger:ro
{%- endif %}
    depends_on:
    - api
  api:
    image: postgrest/postgrest:{{ cookiecutter.postgrest_version }}
    environment:
      PGRST_DB_URI: "postgres://authenticator:{{ cookiecutter.authenticator_password }}@database:5432/{{ cookiecutter.project_slug }}"
      PGRST_DB_SCHEMA: "public"
      PGRST_DB_ANON_ROLE: "anonymous"
      PGRST_JWT_SECRET: "{{ random_ascii_string(64) }}"
{%- if cookiecutter.use_swagger_ui == 'y' %}
      PGRST_OPENAPI_MODE: "follow-privileges"
      PGRST_OPENAPI_SERVER_PROXY_URI: "http://{{ cookiecutter.domain_name }}:8080/api/"
{%- else %}
      PGRST_OPENAPI_MODE: "disabled"
{%- endif %}
    volumes:
    - ./logs/api:/var/log:rw
    depends_on:
    - database
  database:
    image: postgres:{{ cookiecutter.postgresql_version }}
    environment:
      POSTGRES_DB: "{{ cookiecutter.project_slug }}"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "{{ cookiecutter.postgresql_password }}"
      AUTHENTICATOR_PASSWORD: "{{ cookiecutter.authenticator_password }}"
    ports:
    - 5432:5432
    volumes:
    - ./logs/database:/var/log/postgresql:rw
    - ./data:/var/lib/postgres/:rw
    - ./initdb:/docker-entrypoint-initdb.d:ro
    # Mount psql config file in the system configuration directory.
    - ./.psqlrc:/etc/postgresql-common/psqlrc:ro

# Misc.
charset utf-8;
server_tokens off;
underscores_in_headers on;

# Log configuration.
error_log /var/log/nginx/error.log warn;
access_log /var/log/nginx/access.log;

# Add headers to tell browsers to be stricter
add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-Frame-Options "DENY" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Content-Security-Policy "sandbox allow-scripts allow-forms allow-same-origin; referrer no-referrer; reflected-xss block; report-uri /api/rpc/csp_report; default-src 'none'; img-src 'self'; style-src 'self' cdnjs.cloudflare.com; font-src 'self' cdn.auth0.com cdnjs.cloudflare.com; script-src 'self' example.auth0.com cdn.auth0.com code.jquery.com cdnjs.cloudflare.com; connect-src 'self' example.auth0.com" always;
add_header Access-Control-Allow-Origin "https://${NGINX_HOST}" always;

# Handle traffic on HTTP port :${NGINX_HTTP_PORT}.
server {
    listen ${NGINX_HTTP_PORT};
    listen [::]:${NGINX_HTTP_PORT} ipv6only=on;

    # ACME challenges for letsencrypt
    location /.well-known/acme-challenge {
        default_type text/plain;
        root /srv/acme-challenge;
        try_files $uri =404;
    }

{%- if cookiecutter.nginx_use_ssl == 'y' %}
    # Redirect all http to https (except the ACME challenge)
    location / {
        return 301 https://${NGINX_HOST}$request_uri;
    }
{% else %}
    # Proxy api requests to the PostgREST.
    location /api/ {
        proxy_pass http://api:3000/;

        # Rewrite Location and Content-Location headers.
        proxy_hide_header Location;
        add_header        Location /api$upstream_http_location;
        proxy_hide_header Content-Location;
        add_header        Content-Location /api$upstream_http_content_location;
    }
{%- endif %}
}

{%- if cookiecutter.nginx_use_ssl == 'y' %}
# Force secure protocols
ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;

# Load custom DH parameters
ssl_dhparam /etc/ssl/certs/dhparam.pem;

# OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;

# DNS settings
resolver 1.1.1.1 8.8.8.8 valid=300s;
resolver_timeout 5s;

# Handle traffic on HTTPS port :${NGINX_HTTPS_PORT}.
server {
    listen ${NGINX_HTTPS_PORT} default_server;
    listen [::]:${NGINX_HTTPS_PORT} default_server ipv6only=on;
    server_name ${NGINX_HOST};

    # Certificates
    ssl on;
    ssl_certificate     /etc/ssl/certs/live/${NGINX_HOST}/fullchain.pem;
    ssl_certificate_key /etc/ssl/certs/live/${NGINX_HOST}/privkey.pem;

    # Proxy api requests to the PostgREST
    location /api/ {
        proxy_pass http://api:3000/;

        # Rewrite Location and Content-Location headers.
        proxy_hide_header Location;
        add_header        Location  /api$upstream_http_location;
        proxy_hide_header Content-Location;
        add_header        Content-Location  /api$upstream_http_content_location;
    }
}
{%- endif %}
